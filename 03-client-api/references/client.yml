title: "Client"
methods:
  - method:
    common: &method-session
      title: Create a session for a database
      description: >
        Opens a communication tunnel (session) to the given database on the running Grakn server.
      accepts: &accepts-session
        param1: &accepts-session-database
          name: database
          description: The name of the database with which the session connects.
          type: String
          required: true
          default: N/A
        param2: &accepts-session-type
          name: type
          description: The type of session to be created (DATA or SCHEMA)
          type: Grakn.SessionType
          required: true
          default: N/A
        param3: &accepts-session-options
          name: type
          description: Options for the session.
          type: GraknOptions
          required: false
          default: N/A
      returns:
        - "[Session](#session) object"
    java:
      <<: *method-session
      method: client.session(String database, Grakn.SessionType sessionType, GraknOptions options);
    javascript:
      <<: *method-session
      method: await client.session(database, sessionType, options)
    python:
      <<: *method-session
      method: client.session(database, session_type, options)

  - method:
    common: &method-databases-all
      title: Retrieve all databases
      description: Retrieves the name of all databases running on the Grakn server.
    java:
      <<: *method-databases-all
      method: client.databases().all();
      returns:
        - List of Strings
    javascript:
      <<: *method-databases-all
      method: await client.databases().all();
      returns:
        - Array of Strings
    python:
      <<: *method-databases-all
      method: client.databases().all()
      returns:
        - List of Strings

  - method:
    common: &method-databases-contains
      title: Check if a database exists
      description: Checks if a database with the given name exists
      accepts: &accepts-databases-contains
        param: &accepts-databases-create-database
          name: database
          description: The database name to be checked.
          type: String
          required: true
          default: N/A
    java:
      <<: *method-databases-contains
      method: client.databases().contains(String database);
      returns:
        - boolean
    javascript:
      <<: *method-databases-contains
      method: await client.databases().contains("database name");
      returns:
        - boolean
    python:
      <<: *method-databases-contains
      method: client.databases().contains("database name")
      returns:
        - boolean

  - method:
    common: &method-databases-create
      title: Create a database
      description: Create a database with the given name.
      accepts: &accepts-databases-create
        param: &accepts-databases-create-database
          name: database
          description: The name of the database to be created.
          type: String
          required: true
          default: N/A
    java:
      <<: *method-databases-create
      method: client.databases().create(String database);
      returns:
        - void
    javascript:
      <<: *method-databases-create
      method: await client.databases().create("database name");
      returns:
        - void
    python:
      <<: *method-databases-create
      method: client.databases().create("database name")
      returns:
        - None

  - method:
    common: &method-databases-delete
      title: Delete a database
      description: Deletes a database with the given name.
      accepts: &accepts-databases-delete
        param: &accepts-databases-delete-database
          name: database
          description: The name of the database to be deleted.
          type: String
          required: true
          default: N/A
    java:
      <<: *method-databases-delete
      method: client.databases().delete(String database);
      returns:
        - void
    javascript:
      <<: *method-databases-delete
      method: await client.databases().delete("database name");
      returns:
        - void
    python:
      <<: *method-databases-delete
      method: client.databases().delete("database name")
      returns:
        - None

  - method:
    common: &method-close
      title: Close a client
      description: Before instantiating a new client, the client that's currently open should first be closed.
    java:
      <<: *method-close
      method: client.close();
      returns:
        - void
    javascript:
      <<: *method-close
      method: client.close();
      returns:
        - void
    python:
      <<: *method-close
      method: client.close()
      returns:
        - None
