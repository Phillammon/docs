methods:
  - method:
    common: &method-iid
      title: Retrieves internal ID (Local)
      description: Retrieves the unique id of the type.
      returns:
        - "string"
    java:
      <<: *method-iid
      method: thing.getIID();
    javascript:
      <<: *method-iid
      method: thing.getIID();
    python:
      <<: *method-iid
      method: thing.get_iid()

  - method:
    common: &method-asRemote
      title: Get a Remote version of the Thing.
      description: The remote version uses the given transaction to execute every method call.
      accepts:
        param:
          name: tx
          description: The transaction to be used to make method calls.
          type: Transaction
          required: true
          default: N/A
      returns:
        - "`RemoteThing`"
    java:
      <<: *method-asRemote
      method: thing.asRemote(tx);
      returns:
        - "`Thing.Remote`"
    javascript:
      <<: *method-asRemote
      method: thing.asRemote(tx);
    python:
      <<: *method-asRemote
      method: thing.as_remote(tx)

  - method:
    common: &method-type
      title: Retrieve type
      description: Retrieves the type which this Thing belongs to.
      returns:
        - "[`ThingType`](../concept-api/type)"
    java:
      <<: *method-type
      method: thing.getType();
    javascript:
      <<: *method-type
      method: await thing.getType();
    python:
      <<: *method-type
      method: thing.get_type()

  - method:
    common: &method-setHas
      title: Assign attribute
      description: Assigns an Attribute to be owned by this Thing.
      accepts:
        param: &accepts-setHas-attribute
          name: attribute
          description: The Attribute to be owned by this Thing.
          required: true
          default: N/A
    java:
      <<: *method-setHas
      method: thing.setHas(Attribute<?> attribute);
      accepts:
        param:
          <<: *accepts-setHas-attribute
          type: "[`Attribute<?>`](../concept-api/thing?tab=java#attribute-methods)"
      returns:
        - "[`Thing`](../concept-api/thing?tab=java)"
    javascript:
      <<: *method-setHas
      method: await thing.setHas(attribute);
      accepts:
        param:
          <<: *accepts-setHas-attribute
          type: "[`Attribute`](../concept-api/thing?tab=javascript#attribute-methods)"
      returns:
        - "[`Thing`](../concept-api/thing?tab=javascript)"
    python:
      <<: *method-setHas
      method: thing.set_has(attribute)
      accepts:
        param:
          <<: *accepts-setHas-attribute
          type: "[`Attribute`](../concept-api/thing?tab=python#attribute-methods)"
      returns:
        - "[`Thing`](../concept-api/thing?tab=python)"

  - method:
    common: &method-unsetHas
      title: Unassign attribute
      description: Unassigns an Attribute from this Thing.
      accepts:
        param:
          name: attribute
          description: The Attribute to be disowned from this Thing.
          type: "[`Attribute`](../concept-api/thing#attribute-methods)"
          required: true
          default: N/A
    java:
      <<: *method-unsetHas
      method: thing.unsetHas(Attribute<?> attribute);
      returns:
        - "[`Thing`](../concept-api/thing?tab=java)"
    javascript:
      <<: *method-unsetHas
      method: await thing.unsetHas(attribute);
      returns:
        - "[`Thing`](../concept-api/thing?tab=javascript)"
    python:
      <<: *method-unsetHas
      method: thing.unset_has(attribute)
      returns:
        - "[`Thing`](../concept-api/thing?tab=python)"

  - method:
    common: &method-isInferred
      title: Check if inferred
      description: Checks if this Thing is inferred by a [Reasoning Rule](../schema/rules).
      returns:
        - boolean
    java:
      <<: *method-isInferred
      method: thing.isInferred();
    javascript:
      <<: *method-isInferred
      method: await thing.isInferred();
    python:
      <<: *method-isInferred
      method: thing.is_inferred()

  - method:
    common: &method-getHasWithOnlyKey
      title: Retrieve attributes
      description: Retrieves the Attributes that this Thing owns, optionally filtered by one or more AttributeTypes.
      accepts: &accepts-getHasWithOnlyKey
        param: &accepts-getHasWithOnlyKey-onlyKey
          name: onlyKey
          type: boolean
          description: If set to `true`, only attributes owned as a key will be retrieved.
          required: false
          default: false
    java:
      <<: *method-getHasWithOnlyKey
      method: thing.getHas(boolean onlyKey));
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
      returns:
        - Stream<[`Attribute<?>`](../concept-api/thing?tab=java#attribute-methods)>
    javascript:
      <<: *method-getHasWithOnlyKey
      method: await thing.attributes(attributeTypes);
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
          name: attributeTypes
          type: "Array of [`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)s"
      returns:
        - "Iterator of [`Attribute`](../concept-api/thing?tab=javascript#attribute-methods) objects"
    python:
      <<: *method-getHasWithOnlyKey
      method: thing.attributes(attribute_types)
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
          name: attribute_types
          type: "List of [`AttributeType`](../concept-api/type?tab=pyhthon#attributetype-methods)s"
      returns:
        - "Iterator of [`Attribute`](../concept-api/thing?tab=pyhthon#attribute-methods) objects"

  - method:
    common: &method-getHasWithOnlyKey
      title: Retrieve attributes
      description: Retrieves the Attributes that this Thing owns, optionally filtered by one or more AttributeTypes.
      accepts: &accepts-getHasWithOnlyKey
        param: &accepts-getHasWithOnlyKey-onlyKey
          description: The AttributeTypes to filter the attributes by.
          required: false
          default: N/A
    java:
      <<: *method-getHasWithOnlyKey
      method: thing.attributes(AttributeType... attributeTypes));
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
          name: attributeTypes
          type: "Varargs of [`AttributeType`](../concept-api/type?tab=java#attributetype-methods)s"
      returns:
        - "Stream of [`Attribute`](../concept-api/thing?tab=java#attribute-methods) objects"
    javascript:
      <<: *method-getHasWithOnlyKey
      method: await thing.attributes(attributeTypes);
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
          name: attributeTypes
          type: "Array of [`AttributeType`](../concept-api/type?tab=javascript#attributetype-methods)s"
      returns:
        - "Iterator of [`Attribute`](../concept-api/thing?tab=javascript#attribute-methods) objects"
    python:
      <<: *method-getHasWithOnlyKey
      method: thing.attributes(attribute_types)
      accepts:
        <<: *accepts-getHasWithOnlyKey
        param:
          <<: *accepts-getHasWithOnlyKey-onlyKey
          name: attribute_types
          type: "List of [`AttributeType`](../concept-api/type?tab=pyhthon#attributetype-methods)s"
      returns:
        - "Iterator of [`Attribute`](../concept-api/thing?tab=pyhthon#attribute-methods) objects"

  - method:
    common: &method-relations
      title: Retrieve relations
      description: Retrieves all the Relations which this Thing plays a role in, optionally filtered by one or more given roles.
      accepts: &accepts-relations
        param: &accepts-relations-param-roles
          name: roles
          description: The list of roles to filter the relations by.
          required: false
          default: N/A
    java:
      <<: *method-relations
      method: thing.relations(Role... roles);
      accepts:
        param:
          <<: *accepts-relations-param-roles
          type: "Varargs of [`Role`](../concept-api/type?tab=java#role-methods) objects"
      returns:
        - "Stream of [`Relation`](../concept-api/thing?tab=java#relation-methods) objects"
    javascript:
      <<: *method-relations
      method: await thing.relations(roles);
      accepts:
        param:
          <<: *accepts-relations-param-roles
          type: "Array of [`Role`](../concept-api/type?tab=javascript#role-methods)s"
      returns:
        - "Iterator of [`Relation`](../concept-api/thing?tab=javascript#relation-methods) objects"
    python:
      <<: *method-relations
      method: thing.relations(roles)
      accepts:
        param:
          <<: *accepts-relations-param-roles
          type: "List of [`Role`](../concept-api/type?tab=python#role-methods)s"
      returns:
        - "Iterator of [`Relation`](../concept-api/thing?tab=python#relation-methods) objects"

  - method:
    common: &method-roles
      title: Retrieve roles
      description: Retrieves the roles that this Thing plays.
    java:
      <<: *method-roles
      method: thing.roles();
      returns:
        - "Stream of [`Role`](../concept-api/type?tab=java#role-methods) objects"
    javascript:
      <<: *method-roles
      method: await thing.roles();
      returns:
        - "Iterator of [`Role`](../concept-api/type?tab=javascript#role-methods) objects"
    python:
      <<: *method-roles
      method: thing.roles()
      returns:
        - "Iterator of [`Role`](../concept-api/type?tab=python#role-methods) objects"
